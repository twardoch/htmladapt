# this_file: src/htmladapt/algorithms/id_generation.py
"""ID generation system for HTML elements."""

import logging
from typing import Optional, Set

logger = logging.getLogger(__name__)


class IDGenerator:
    """Generates unique, collision-free IDs for HTML elements.

    Uses base36 encoding for compact IDs with hierarchical numbering
    for traceability and collision detection.
    """

    def __init__(self, prefix: str = "auto_") -> None:
        """Initialize the ID generator.

        Args:
            prefix: Prefix for generated IDs
        """
        self.prefix = prefix
        self._counter = 0
        self._used_ids: set[str] = set()

    def generate_id(self, element_hint: str | None = None) -> str:
        """Generate a unique ID for an HTML element.

        Args:
            element_hint: Optional hint about the element type for debugging

        Returns:
            Unique element ID
        """
        while True:
            # Convert counter to base36 for compact representation
            base36_counter = self._to_base36(self._counter)

            if element_hint:
                # Include element hint for better traceability
                candidate_id = f"{self.prefix}{element_hint}_{base36_counter}"
            else:
                candidate_id = f"{self.prefix}{base36_counter}"

            self._counter += 1

            # Check for collisions
            if candidate_id not in self._used_ids:
                self._used_ids.add(candidate_id)
                logger.debug(f"Generated ID: {candidate_id}")
                return candidate_id

            # Continue to next counter value if collision detected
            logger.debug(f"ID collision detected: {candidate_id}")

    def register_existing_id(self, existing_id: str) -> None:
        """Register an existing ID to avoid collisions.

        Args:
            existing_id: ID that already exists in the document
        """
        self._used_ids.add(existing_id)
        logger.debug(f"Registered existing ID: {existing_id}")

    def is_generated_id(self, element_id: str) -> bool:
        """Check if an ID was generated by this generator.

        Args:
            element_id: ID to check

        Returns:
            True if ID was generated by this generator
        """
        return element_id.startswith(self.prefix)

    def reset(self) -> None:
        """Reset the generator state."""
        self._counter = 0
        self._used_ids.clear()
        logger.debug("ID generator reset")

    def _to_base36(self, num: int) -> str:
        """Convert integer to base36 string.

        Args:
            num: Integer to convert

        Returns:
            Base36 string representation
        """
        if num == 0:
            return "0"

        digits = "0123456789abcdefghijklmnopqrstuvwxyz"
        result = ""

        while num > 0:
            result = digits[num % 36] + result
            num //= 36

        return result

    @property
    def stats(self) -> dict[str, int]:
        """Get generator statistics.

        Returns:
            Dictionary with generation statistics
        """
        return {
            "counter": self._counter,
            "used_ids_count": len(self._used_ids),
        }